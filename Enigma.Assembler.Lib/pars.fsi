// Signature file for parser generated by fsyacc
module DCPU16.Assembler.Parser
type token = 
  | EOF
  | COMMA
  | LABEL of (string)
  | ADD
  | SUB
  | MUL
  | DIV
  | SET
  | REG_A
  | REG_B
  | REG_C
  | REG_X
  | REG_Y
  | REG_Z
  | INT of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_LABEL
    | TOKEN_ADD
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_SET
    | TOKEN_REG_A
    | TOKEN_REG_B
    | TOKEN_REG_C
    | TOKEN_REG_X
    | TOKEN_REG_Y
    | TOKEN_REG_Z
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (string) 
